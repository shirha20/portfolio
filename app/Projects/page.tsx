'use client'
import React, { useState } from 'react';
import '@/styles/projects.css';

// Define the Project type and projects array
type Project = {
  name: string;
  shortDescription: string;
  fullDescription: string;
  role: string;
  technologies: string[];
  features: string[];
  outcome: string[];
  github: string;
  demo?: string;
};

const projects: Project[] = [
  {
    name: "Quizopia",
    shortDescription: "Marvel-themed quiz application testing your knowledge about Marvel characters.",
    fullDescription: `About: Quizopia is a Marvel-themed quiz application that tests your knowledge about Marvel characters and their universe. The app includes detailed character profiles and a variety of quiz questions to challenge users.`,
    role: "Full Stack Developer",
    technologies: ["Next.js", "HTML & CSS", "JavaScript", "JSON"],
    features: ["Character Profiles", "Quiz Questions", "User-friendly Interface"],
    outcome: ["Provides a platform for Marvel fans to test their knowledge.", "Features comprehensive character profiles and a variety of quiz questions.", "Ensures a seamless user experience."],
    github: "https://github.com/gaureshpai/ggquizopia",
    demo: "https://ggquizopia.vercel.app",
  },
  {
    name: "GGReplicater",
    shortDescription: "Web app utilizing Replicate AI to generate images based on user prompts.",
    fullDescription: `About: GGReplicater is a web application hosted on Vercel that utilizes Replicate AI to generate images based on user prompts.`,
    role: "Full Stack Developer",
    technologies: ["Next.js", "Replicate AI", "Tailwind CSS"],
    features: ["Generate Images", "Download Images", "Open Source"],
    outcome: ["Provides an easy-to-use platform for generating images.", "Promotes creativity through AI-generated images.", "Encourages community contributions."],
    github: "https://github.com/gaureshpai/ggreplicater",
    demo: "https://ggreplicater.vercel.app/",
  },
  {
    name: "IdeaSpark",
    shortDescription: "Open-source AI prompting tool to ignite your creativity.",
    fullDescription: `About: IdeaSpark is your go-to open-source AI prompting tool, designed to ignite your creativity. Discover, create, and share captivating prompts generated by advanced artificial intelligence. Dive into the world of inspiration with IdeaSpark!`,
    role: "Full Stack Developer",
    technologies: ["Next.js", "AI Algorithms", "Tailwind CSS"],
    features: ["AI-Generated Prompts", "User-friendly Interface", "Open Source"],
    outcome: ["Communicates its purpose as an AI prompting tool for creativity.", "Provides clear instructions for getting started.", "Features a user-friendly interface."],
    github: "https://github.com/gaureshpai/IdeaSpark",
    demo: "https://ggideaspark.vercel.app/",
  },
  {
    name: "Interpretations Management App",
    shortDescription: "Manage interpretations with ease using this Next.js app backed by AppWriter.",
    fullDescription: `About: Effortlessly manage interpretations with this Next.js app backed by AppWriter. View, edit, and delete interpretations with ease. Simplify your interpretation management tasks today!ðŸŒŸ This web application allows users to manage interpretations, providing a platform to view, edit, and delete interpretations stored in the database. It utilizes Next.js for the frontend and AppWriter as the backend service.`,
    role: "Full Stack Developer",
    technologies: ["Next.js", "React", "AppWriter", "Tailwind CSS"],
    features: ["View Interpretations", "Edit Interpretations", "Delete Interpretations"],
    outcome: ["Provides a platform for managing interpretations.", "Offers features for viewing, editing, and deleting interpretations.", "Built using Next.js and AppWriter."],
    github: "https://github.com/gaureshpai/Interpretations-Management-App",
    demo: "https://gginterpretations.vercel.app/",
  },
  {
    name: "Java Swing Registration & Quiz App",
    shortDescription: "Java Swing application for user registration, login, and a fun quiz experience.",
    fullDescription: `About: An intuitive Java Swing application for user registration, login, and a fun quiz experience. Seamlessly register, login securely, and test your knowledge with an interactive quiz. Save user credentials and quiz results for easy access.`,
    role: "Full Stack Developer",
    technologies: ["Java Swing"],
    features: ["User Registration", "User Login", "Forgot Password", "Online Quiz", "Quiz Result"],
    outcome: ["Provides a sleek and user-friendly interface.", "Features secure registration and login.", "Offers an interactive quiz experience."],
    github: "https://github.com/gaureshpai/Java-Swing-Registration-Quiz-App",
  },
  {
    name: "Java Swing Login-Quiz App",
    shortDescription: "Java Swing-based login application with password visibility control and recovery.",
    fullDescription: `About: A user-friendly Java Swing-based login application with password visibility control and "Forgot Password?" recovery. Features secure authentication, clean styling, and an intuitive interface.`,
    role: "Full Stack Developer",
    technologies: ["Java Swing"],
    features: ["Login Form", "Show Password", "Forgot Password", "Styling"],
    outcome: ["Provides secure authentication.", "Features clean and intuitive UI.", "Includes password recovery functionality."],
    github: "https://github.com/gaureshpai/Java-Swing-Login-Quiz-App",
  },
  {
    name: "HTML Converter",
    shortDescription: "Java program converting text files into HTML files with basic styling.",
    fullDescription: `This Java program converts text files into HTML files, adding basic styling and including the filename as a heading. The Main class takes input from a text file and generates an HTML file with the same content.`,
    role: "Full Stack Developer",
    technologies: ["Java"],
    features: ["Input File Conversion", "Output HTML File", "Basic Styling"],
    outcome: ["Converts text files to styled HTML files.", "Adds the filename as a heading in the HTML file.", "Ensures basic styling for the HTML content."],
    github: "https://github.com/gaureshpai/filetohtmlfileconvertor",
  },
];


// Define ProjectSummaryProps
type ProjectSummaryProps = {
  project: Project;
};

// Define ProjectSummary component
const ProjectSummary: React.FC<ProjectSummaryProps> = ({ project }) => {
  // State to toggle details
  const [showDetails, setShowDetails] = useState(false);

  // Toggle details function
  const toggleDetails = () => {
    setShowDetails(!showDetails);
  };

  // Return JSX
  return (
    <div className="project-summary">
      <h3>{project.name}</h3>
      <p>{project.shortDescription}</p>
      {/* Show more/show less button */}
      <button className="toggle-details" onClick={toggleDetails}>
        {showDetails ? 'Show Less' : 'Show More'}
      </button>
      {/* Render details only if showDetails is true */}
      {showDetails && (
        <div>
          <p>{project.fullDescription}</p>
          <p>Role: {project.role}</p>
          <p>Technologies Used:</p>
          <ul>
            {project.technologies.map((tech: string, index: number) => (
              <li key={index}>{tech}</li>
            ))}
          </ul>
          <p>Features:</p>
          <ul>
            {project.features.map((feature: string, index: number) => (
              <li key={index}>{feature}</li>
            ))}
          </ul>
          <p>Outcome:</p>
          <ul>
            {project.outcome.map((outcome: string, index: number) => (
              <li key={index}>{outcome}</li>
            ))}
          </ul>
        </div>
      )}
      {/* Links to GitHub and Demo */}
      <p>
        <a href={project.github} target="_blank" rel="noopener noreferrer">
          GitHub Repository
        </a>
        {project.demo && (
          <a href={project.demo} target="_blank" rel="noopener noreferrer">
            {' | '}  Live Demo
          </a>
        )}
      </p>
    </div>
  );
};

// Define Projects component
const Projects: React.FC = () => (
  <div className="container">
    <h2>Projects</h2>
    {/* Map through projects array and render ProjectSummary for each project */}
    {projects.map((project, index) => (
      <ProjectSummary key={index} project={project} />
    ))}
  </div>
);

// Export Projects component as default
export default Projects;
